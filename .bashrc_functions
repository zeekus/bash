TZ='America/New_York'; export TZ

# User specific aliases and functions
count_http () {
   ps aux| grep -i http| grep -v ps | wc -l
}

myip () {
  myip=$(ip addr | grep eth0 | grep inet | awk {'print $2'} | sed 's/\/24//g')
  echo $myip
}

most_active_ip () {
 echo "Most active ip at connecting to TCP port 443 :" `date`
 netstat -nat | grep -i :443 | awk '{print $5}' | grep -v "*" | sed -e s/:.*//g | sort | uniq -c | sort -n
}

last_hour() {
   echo "find files modifed in last hour in $PWD"
   srch_dir="$PWD"
   find $srch_dir -type f -mmin -60
}

catagorize_types_of_443_connections() {
 echo "types of connections on TCP port 443:" `date`
 netstat -nat | grep -i :443 | awk '{print $6}' | sort | uniq -c | sort -n
}

find_most_active_time_waits_on_webports() {
 ports="80 443"
 for port in $ports
    do
      echo "TCP timewaits on port $port at " `date` 
      netstat -nat | grep -i :$port | grep -i time | awk '{print $5}' | grep -v "*" | sed -e s/:.*//g | sort | uniq -c | sort -n
    done
}           



backup_root_history () {
   mydate=`date +%d_%b_%Y_%H%M`
   sudo cp /root/.bash_history ~/root_history_$mydate
}

load_rsa_ssh_key_into_agent() {
  # Debug: Ensure we're using the correct home directory
  ssh_path="${HOME}/.ssh"

  # Specifically look for id_rsa, excluding .pub files
  ssh_private_keys=$(find "$ssh_path" -type f -name "id_rsa" ! -name "*.pub")

  # Check if any keys were found
  if [[ -z "$ssh_private_keys" ]]; then
    echo "No id_rsa key found in $ssh_path"
    return 1
  fi

  # Start SSH agent if not already running
  eval "$(ssh-agent -s)" &> /dev/null

   # Load the specific id_rsa key
   for key in $ssh_private_keys; do
     echo "Loading SSH key: $key"
     ssh-add "$key" &> /dev/null
   done

   # Verify key addition
   ssh-add -l
}


load_all_ssh_keys_into_agent() {
  echo "start ssh agent"
  eval `ssh-agent -s`
  echo "loading ssh keys"
  ssh_path="$HOME/.ssh"
  echo "ssh_path is $ssh_path"
  ssh_private_keys=`ls $ssh_path| grep -i id_ | grep -v pub`
  echo "private keys are: '$ssh_private_keys'"
  for filename in $ssh_private_keys
       do
         echo $filename
         echo loading $ssh_path/$filename into ssh-agent
         ssh-add $ssh_path/$filename &> /dev/null
       done
}

top_20_hiters_from_apache() {
 echo "top 20 hitters from logs today `date +%d/%b/%Y`"
  cat /var/log/httpd/live.access.log | grep `date +%d/%b/%Y` | awk {'print $1'} | sort -n | uniq -c | sort -n | tail -20
} 

get_sar_info () {
#get sar logs 
for x in $(seq 31)
 do
 printf "$x\n"
 if [ $x -lt 10 ]; then
   LC_ALL=C sar -A -f /var/log/sa/sa0$x > sa0$x.txt
 else
   LC_ALL=C sar -A -f /var/log/sa/sa$x > sa$x.txt
 fi
 done
}

list_function_names() {
  dirty_list_of_functions=`grep "()" $HOME/.bashrc|grep -v grep| grep -v sed`
  clean_list=`(echo $dirty_list_of_functions| sed 's/[[:space:]]//g' | sed 's/(){/ /g')`
  for function_name in $clean_list
    do
      echo $function_name
    done
}


top_20_vanish_hitters_by_hour () {
   myday=$(seq -w 00 23) #24 hours
   for myhour in $myday
     do
     mylines=$(cat /var/log/varnish/varnishncsa.log | grep `date +%d/%b/%Y:$myhour` | awk {'print $1'} | sort -n | uniq -c | sort -n | tail -20)
     mylines_size=${#mylines}
     if [[ $mylines_size -gt 0 ]];then
        echo "hour $myhour"
        cat /var/log/varnish/varnishncsa.log | grep `date +%d/%b/%Y:$myhour` | awk {'print $1'} | sort -n | uniq -c | sort -n | tail -20
     fi
     done
}

#kill off x2go processes by the user logged in
kill_x2go() {
  process_list=$(ps aux | grep -i x2go | grep $USER| grep -v grep | awk {'print $2'})
  for process in $process_list
  do
    kill -9 $process
  done
}

list_yum_from_yesterday(){
  if [[ -e /usr/bin/yum ]]; then
    yesterday=$(date -d yesterday +%b\ %d)
    
    #get the updates applied yesterday and parse the ouput to remove everything up to the ":" and remove any spaces
    grep ^"$yesterday" /var/log/yum.log| sed -e s/.*://g | sed -e s/\ //g
  else
    echo $yesterday is yesterday
    echo "Error: We don't have yum on this system."
  fi
}

#java options to disable rendering for macs
JAVA_OPTS="-Dsun.java2d.xrender=false"
export JAVA_OPTS="-Dsun.java2d.xrender=false"

platform='unknown'
unamestr=$(uname -a)
if [[ "$unamestr" =~ "-Micro" ]]; then
  platform="Windows"
  echo "Windows detected"
  export DISPLAY=":0"
  #set paths in windows
  if [[ "$PATH" =~ cygdrive ]]; then
    echo "cygwin eviornment detected"
    myuser=$USER
    myroot="/cygdrive/c/Users/$myuser" 
  else
    echo "non cygwin eviornment detected"
    myuser=$NAME
    myroot="/mnt/c/Users/$myuser"
  fi
  mysite="Example Site"
  onedrive="OneDrive\ -\ $mysite"
  alias outlook_data="$myroot/AppData/Local/Microsoft/Outlook"
  alias mygit="cd $myroot/git"
  alias downloads="cd $myroot/Downloads"
  alias myhome="cd $myroot"
  alias docs="cd $myroot/$onedrive/Documents"
elif [[ "$unamestr" =~ "Linux" ]]; then
  platform="Linux"
  echo "Linux detected"
else
  platform="Unknown"
  echo "Unknown OS detected"
fi 
